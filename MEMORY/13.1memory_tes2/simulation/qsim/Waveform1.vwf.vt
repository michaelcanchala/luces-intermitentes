// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2024 22:28:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    memory_tes2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module memory_tes2_vlg_sample_tst(
	address,
	clock,
	data_in,
	reset,
	write,
	sampler_tx
);
input [7:0] address;
input  clock;
input [7:0] data_in;
input  reset;
input  write;
output sampler_tx;

reg sample;
time current_time;
always @(address or clock or data_in or reset or write)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module memory_tes2_vlg_check_tst (
	data_out,
	segmentos_0,
	segmentos_1,
	segmentos_2,
	segmentos_3,
	sampler_rx
);
input [7:0] data_out;
input [6:0] segmentos_0;
input [6:0] segmentos_1;
input [6:0] segmentos_2;
input [6:0] segmentos_3;
input sampler_rx;

reg [7:0] data_out_expected;
reg [6:0] segmentos_0_expected;
reg [6:0] segmentos_1_expected;
reg [6:0] segmentos_2_expected;
reg [6:0] segmentos_3_expected;

reg [7:0] data_out_prev;
reg [6:0] segmentos_0_prev;
reg [6:0] segmentos_1_prev;
reg [6:0] segmentos_2_prev;
reg [6:0] segmentos_3_prev;

reg [7:0] data_out_expected_prev;
reg [6:0] segmentos_0_expected_prev;
reg [6:0] segmentos_1_expected_prev;
reg [6:0] segmentos_2_expected_prev;
reg [6:0] segmentos_3_expected_prev;

reg [7:0] last_data_out_exp;
reg [6:0] last_segmentos_0_exp;
reg [6:0] last_segmentos_1_exp;
reg [6:0] last_segmentos_2_exp;
reg [6:0] last_segmentos_3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
	segmentos_0_prev = segmentos_0;
	segmentos_1_prev = segmentos_1;
	segmentos_2_prev = segmentos_2;
	segmentos_3_prev = segmentos_3;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
	segmentos_0_expected_prev = segmentos_0_expected;
	segmentos_1_expected_prev = segmentos_1_expected;
	segmentos_2_expected_prev = segmentos_2_expected;
	segmentos_3_expected_prev = segmentos_3_expected;
end


// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// expected segmentos_0[ 6 ]
initial
begin
	segmentos_0_expected[6] = 1'bX;
end 
// expected segmentos_0[ 5 ]
initial
begin
	segmentos_0_expected[5] = 1'bX;
end 
// expected segmentos_0[ 4 ]
initial
begin
	segmentos_0_expected[4] = 1'bX;
end 
// expected segmentos_0[ 3 ]
initial
begin
	segmentos_0_expected[3] = 1'bX;
end 
// expected segmentos_0[ 2 ]
initial
begin
	segmentos_0_expected[2] = 1'bX;
end 
// expected segmentos_0[ 1 ]
initial
begin
	segmentos_0_expected[1] = 1'bX;
end 
// expected segmentos_0[ 0 ]
initial
begin
	segmentos_0_expected[0] = 1'bX;
end 
// expected segmentos_1[ 6 ]
initial
begin
	segmentos_1_expected[6] = 1'bX;
end 
// expected segmentos_1[ 5 ]
initial
begin
	segmentos_1_expected[5] = 1'bX;
end 
// expected segmentos_1[ 4 ]
initial
begin
	segmentos_1_expected[4] = 1'bX;
end 
// expected segmentos_1[ 3 ]
initial
begin
	segmentos_1_expected[3] = 1'bX;
end 
// expected segmentos_1[ 2 ]
initial
begin
	segmentos_1_expected[2] = 1'bX;
end 
// expected segmentos_1[ 1 ]
initial
begin
	segmentos_1_expected[1] = 1'bX;
end 
// expected segmentos_1[ 0 ]
initial
begin
	segmentos_1_expected[0] = 1'bX;
end 
// expected segmentos_2[ 6 ]
initial
begin
	segmentos_2_expected[6] = 1'bX;
end 
// expected segmentos_2[ 5 ]
initial
begin
	segmentos_2_expected[5] = 1'bX;
end 
// expected segmentos_2[ 4 ]
initial
begin
	segmentos_2_expected[4] = 1'bX;
end 
// expected segmentos_2[ 3 ]
initial
begin
	segmentos_2_expected[3] = 1'bX;
end 
// expected segmentos_2[ 2 ]
initial
begin
	segmentos_2_expected[2] = 1'bX;
end 
// expected segmentos_2[ 1 ]
initial
begin
	segmentos_2_expected[1] = 1'bX;
end 
// expected segmentos_2[ 0 ]
initial
begin
	segmentos_2_expected[0] = 1'bX;
end 
// expected segmentos_3[ 6 ]
initial
begin
	segmentos_3_expected[6] = 1'bX;
end 
// expected segmentos_3[ 5 ]
initial
begin
	segmentos_3_expected[5] = 1'bX;
end 
// expected segmentos_3[ 4 ]
initial
begin
	segmentos_3_expected[4] = 1'bX;
end 
// expected segmentos_3[ 3 ]
initial
begin
	segmentos_3_expected[3] = 1'bX;
end 
// expected segmentos_3[ 2 ]
initial
begin
	segmentos_3_expected[2] = 1'bX;
end 
// expected segmentos_3[ 1 ]
initial
begin
	segmentos_3_expected[1] = 1'bX;
end 
// expected segmentos_3[ 0 ]
initial
begin
	segmentos_3_expected[0] = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out or segmentos_0_expected or segmentos_0 or segmentos_1_expected or segmentos_1 or segmentos_2_expected or segmentos_2 or segmentos_3_expected or segmentos_3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | expected segmentos_0 = %b | expected segmentos_1 = %b | expected segmentos_2 = %b | expected segmentos_3 = %b | ",data_out_expected_prev,segmentos_0_expected_prev,segmentos_1_expected_prev,segmentos_2_expected_prev,segmentos_3_expected_prev);
	$display("| real data_out = %b | real segmentos_0 = %b | real segmentos_1 = %b | real segmentos_2 = %b | real segmentos_3 = %b | ",data_out_prev,segmentos_0_prev,segmentos_1_prev,segmentos_2_prev,segmentos_3_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end
	if (
		( segmentos_0_expected_prev[0] !== 1'bx ) && ( segmentos_0_prev[0] !== segmentos_0_expected_prev[0] )
		&& ((segmentos_0_expected_prev[0] !== last_segmentos_0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_0_expected_prev);
		$display ("     Real value = %b", segmentos_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_0_exp[0] = segmentos_0_expected_prev[0];
	end
	if (
		( segmentos_0_expected_prev[1] !== 1'bx ) && ( segmentos_0_prev[1] !== segmentos_0_expected_prev[1] )
		&& ((segmentos_0_expected_prev[1] !== last_segmentos_0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_0_expected_prev);
		$display ("     Real value = %b", segmentos_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_0_exp[1] = segmentos_0_expected_prev[1];
	end
	if (
		( segmentos_0_expected_prev[2] !== 1'bx ) && ( segmentos_0_prev[2] !== segmentos_0_expected_prev[2] )
		&& ((segmentos_0_expected_prev[2] !== last_segmentos_0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_0_expected_prev);
		$display ("     Real value = %b", segmentos_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_0_exp[2] = segmentos_0_expected_prev[2];
	end
	if (
		( segmentos_0_expected_prev[3] !== 1'bx ) && ( segmentos_0_prev[3] !== segmentos_0_expected_prev[3] )
		&& ((segmentos_0_expected_prev[3] !== last_segmentos_0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_0_expected_prev);
		$display ("     Real value = %b", segmentos_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_0_exp[3] = segmentos_0_expected_prev[3];
	end
	if (
		( segmentos_0_expected_prev[4] !== 1'bx ) && ( segmentos_0_prev[4] !== segmentos_0_expected_prev[4] )
		&& ((segmentos_0_expected_prev[4] !== last_segmentos_0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_0_expected_prev);
		$display ("     Real value = %b", segmentos_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_0_exp[4] = segmentos_0_expected_prev[4];
	end
	if (
		( segmentos_0_expected_prev[5] !== 1'bx ) && ( segmentos_0_prev[5] !== segmentos_0_expected_prev[5] )
		&& ((segmentos_0_expected_prev[5] !== last_segmentos_0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_0_expected_prev);
		$display ("     Real value = %b", segmentos_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_0_exp[5] = segmentos_0_expected_prev[5];
	end
	if (
		( segmentos_0_expected_prev[6] !== 1'bx ) && ( segmentos_0_prev[6] !== segmentos_0_expected_prev[6] )
		&& ((segmentos_0_expected_prev[6] !== last_segmentos_0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_0_expected_prev);
		$display ("     Real value = %b", segmentos_0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segmentos_0_exp[6] = segmentos_0_expected_prev[6];
	end
	if (
		( segmentos_1_expected_prev[0] !== 1'bx ) && ( segmentos_1_prev[0] !== segmentos_1_expected_prev[0] )
		&& ((segmentos_1_expected_prev[0] !== last_segmentos_1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_1_expected_prev);
		$display ("     Real value = %b", segmentos_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_1_exp[0] = segmentos_1_expected_prev[0];
	end
	if (
		( segmentos_1_expected_prev[1] !== 1'bx ) && ( segmentos_1_prev[1] !== segmentos_1_expected_prev[1] )
		&& ((segmentos_1_expected_prev[1] !== last_segmentos_1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_1_expected_prev);
		$display ("     Real value = %b", segmentos_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_1_exp[1] = segmentos_1_expected_prev[1];
	end
	if (
		( segmentos_1_expected_prev[2] !== 1'bx ) && ( segmentos_1_prev[2] !== segmentos_1_expected_prev[2] )
		&& ((segmentos_1_expected_prev[2] !== last_segmentos_1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_1_expected_prev);
		$display ("     Real value = %b", segmentos_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_1_exp[2] = segmentos_1_expected_prev[2];
	end
	if (
		( segmentos_1_expected_prev[3] !== 1'bx ) && ( segmentos_1_prev[3] !== segmentos_1_expected_prev[3] )
		&& ((segmentos_1_expected_prev[3] !== last_segmentos_1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_1_expected_prev);
		$display ("     Real value = %b", segmentos_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_1_exp[3] = segmentos_1_expected_prev[3];
	end
	if (
		( segmentos_1_expected_prev[4] !== 1'bx ) && ( segmentos_1_prev[4] !== segmentos_1_expected_prev[4] )
		&& ((segmentos_1_expected_prev[4] !== last_segmentos_1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_1_expected_prev);
		$display ("     Real value = %b", segmentos_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_1_exp[4] = segmentos_1_expected_prev[4];
	end
	if (
		( segmentos_1_expected_prev[5] !== 1'bx ) && ( segmentos_1_prev[5] !== segmentos_1_expected_prev[5] )
		&& ((segmentos_1_expected_prev[5] !== last_segmentos_1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_1_expected_prev);
		$display ("     Real value = %b", segmentos_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_1_exp[5] = segmentos_1_expected_prev[5];
	end
	if (
		( segmentos_1_expected_prev[6] !== 1'bx ) && ( segmentos_1_prev[6] !== segmentos_1_expected_prev[6] )
		&& ((segmentos_1_expected_prev[6] !== last_segmentos_1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_1_expected_prev);
		$display ("     Real value = %b", segmentos_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_segmentos_1_exp[6] = segmentos_1_expected_prev[6];
	end
	if (
		( segmentos_2_expected_prev[0] !== 1'bx ) && ( segmentos_2_prev[0] !== segmentos_2_expected_prev[0] )
		&& ((segmentos_2_expected_prev[0] !== last_segmentos_2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_2_expected_prev);
		$display ("     Real value = %b", segmentos_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_2_exp[0] = segmentos_2_expected_prev[0];
	end
	if (
		( segmentos_2_expected_prev[1] !== 1'bx ) && ( segmentos_2_prev[1] !== segmentos_2_expected_prev[1] )
		&& ((segmentos_2_expected_prev[1] !== last_segmentos_2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_2_expected_prev);
		$display ("     Real value = %b", segmentos_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_2_exp[1] = segmentos_2_expected_prev[1];
	end
	if (
		( segmentos_2_expected_prev[2] !== 1'bx ) && ( segmentos_2_prev[2] !== segmentos_2_expected_prev[2] )
		&& ((segmentos_2_expected_prev[2] !== last_segmentos_2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_2_expected_prev);
		$display ("     Real value = %b", segmentos_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_2_exp[2] = segmentos_2_expected_prev[2];
	end
	if (
		( segmentos_2_expected_prev[3] !== 1'bx ) && ( segmentos_2_prev[3] !== segmentos_2_expected_prev[3] )
		&& ((segmentos_2_expected_prev[3] !== last_segmentos_2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_2_expected_prev);
		$display ("     Real value = %b", segmentos_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_2_exp[3] = segmentos_2_expected_prev[3];
	end
	if (
		( segmentos_2_expected_prev[4] !== 1'bx ) && ( segmentos_2_prev[4] !== segmentos_2_expected_prev[4] )
		&& ((segmentos_2_expected_prev[4] !== last_segmentos_2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_2_expected_prev);
		$display ("     Real value = %b", segmentos_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_2_exp[4] = segmentos_2_expected_prev[4];
	end
	if (
		( segmentos_2_expected_prev[5] !== 1'bx ) && ( segmentos_2_prev[5] !== segmentos_2_expected_prev[5] )
		&& ((segmentos_2_expected_prev[5] !== last_segmentos_2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_2_expected_prev);
		$display ("     Real value = %b", segmentos_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_2_exp[5] = segmentos_2_expected_prev[5];
	end
	if (
		( segmentos_2_expected_prev[6] !== 1'bx ) && ( segmentos_2_prev[6] !== segmentos_2_expected_prev[6] )
		&& ((segmentos_2_expected_prev[6] !== last_segmentos_2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_2_expected_prev);
		$display ("     Real value = %b", segmentos_2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_segmentos_2_exp[6] = segmentos_2_expected_prev[6];
	end
	if (
		( segmentos_3_expected_prev[0] !== 1'bx ) && ( segmentos_3_prev[0] !== segmentos_3_expected_prev[0] )
		&& ((segmentos_3_expected_prev[0] !== last_segmentos_3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_3_expected_prev);
		$display ("     Real value = %b", segmentos_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_3_exp[0] = segmentos_3_expected_prev[0];
	end
	if (
		( segmentos_3_expected_prev[1] !== 1'bx ) && ( segmentos_3_prev[1] !== segmentos_3_expected_prev[1] )
		&& ((segmentos_3_expected_prev[1] !== last_segmentos_3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_3_expected_prev);
		$display ("     Real value = %b", segmentos_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_3_exp[1] = segmentos_3_expected_prev[1];
	end
	if (
		( segmentos_3_expected_prev[2] !== 1'bx ) && ( segmentos_3_prev[2] !== segmentos_3_expected_prev[2] )
		&& ((segmentos_3_expected_prev[2] !== last_segmentos_3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_3_expected_prev);
		$display ("     Real value = %b", segmentos_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_3_exp[2] = segmentos_3_expected_prev[2];
	end
	if (
		( segmentos_3_expected_prev[3] !== 1'bx ) && ( segmentos_3_prev[3] !== segmentos_3_expected_prev[3] )
		&& ((segmentos_3_expected_prev[3] !== last_segmentos_3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_3_expected_prev);
		$display ("     Real value = %b", segmentos_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_3_exp[3] = segmentos_3_expected_prev[3];
	end
	if (
		( segmentos_3_expected_prev[4] !== 1'bx ) && ( segmentos_3_prev[4] !== segmentos_3_expected_prev[4] )
		&& ((segmentos_3_expected_prev[4] !== last_segmentos_3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_3_expected_prev);
		$display ("     Real value = %b", segmentos_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_3_exp[4] = segmentos_3_expected_prev[4];
	end
	if (
		( segmentos_3_expected_prev[5] !== 1'bx ) && ( segmentos_3_prev[5] !== segmentos_3_expected_prev[5] )
		&& ((segmentos_3_expected_prev[5] !== last_segmentos_3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_3_expected_prev);
		$display ("     Real value = %b", segmentos_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_3_exp[5] = segmentos_3_expected_prev[5];
	end
	if (
		( segmentos_3_expected_prev[6] !== 1'bx ) && ( segmentos_3_prev[6] !== segmentos_3_expected_prev[6] )
		&& ((segmentos_3_expected_prev[6] !== last_segmentos_3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segmentos_3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segmentos_3_expected_prev);
		$display ("     Real value = %b", segmentos_3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_segmentos_3_exp[6] = segmentos_3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module memory_tes2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clock;
reg [7:0] data_in;
reg reset;
reg write;
// wires                                               
wire [7:0] data_out;
wire [6:0] segmentos_0;
wire [6:0] segmentos_1;
wire [6:0] segmentos_2;
wire [6:0] segmentos_3;

wire sampler;                             

// assign statements (if any)                          
memory_tes2 i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.data_out(data_out),
	.reset(reset),
	.segmentos_0(segmentos_0),
	.segmentos_1(segmentos_1),
	.segmentos_2(segmentos_2),
	.segmentos_3(segmentos_3),
	.write(write)
);
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
	address[6] = #330000 1'b1;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b1;
	address[5] = #330000 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b1;
	address[4] = #330000 1'b0;
	address[4] = #480000 1'b1;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #90000 1'b1;
	address[3] = #240000 1'b0;
	address[3] = #240000 1'b1;
	address[3] = #240000 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	# 90000;
	repeat(3)
	begin
		address[2] = 1'b0;
		address[2] = #120000 1'b1;
		# 120000;
	end
	address[2] = 1'b0;
	address[2] = #120000 1'b1;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
	# 30000;
	repeat(8)
	begin
		address[1] = 1'b1;
		address[1] = #60000 1'b0;
		# 60000;
	end
	address[1] = 1'b1;
end 
// address[ 0 ]
initial
begin
	repeat(16)
	begin
		address[0] = 1'b1;
		address[0] = #30000 1'b0;
		# 30000;
	end
	address[0] = 1'b1;
	address[0] = #30000 1'b0;
end 

// clock
initial
begin
	repeat(33)
	begin
		clock = 1'b0;
		clock = #15000 1'b1;
		# 15000;
	end
	clock = 1'b0;
end 
// data_in[ 7 ]
initial
begin
	data_in[7] = 1'b0;
end 
// data_in[ 6 ]
initial
begin
	data_in[6] = 1'b0;
end 
// data_in[ 5 ]
initial
begin
	data_in[5] = 1'b0;
end 
// data_in[ 4 ]
initial
begin
	data_in[4] = 1'b0;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
initial
begin
	data_in[2] = 1'b0;
end 
// data_in[ 1 ]
initial
begin
	data_in[1] = 1'b0;
end 
// data_in[ 0 ]
initial
begin
	data_in[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// write
initial
begin
	repeat(16)
	begin
		write = 1'b0;
		write = #30000 1'b1;
		# 30000;
	end
	write = 1'b0;
	write = #30000 1'b1;
end 

memory_tes2_vlg_sample_tst tb_sample (
	.address(address),
	.clock(clock),
	.data_in(data_in),
	.reset(reset),
	.write(write),
	.sampler_tx(sampler)
);

memory_tes2_vlg_check_tst tb_out(
	.data_out(data_out),
	.segmentos_0(segmentos_0),
	.segmentos_1(segmentos_1),
	.segmentos_2(segmentos_2),
	.segmentos_3(segmentos_3),
	.sampler_rx(sampler)
);
endmodule

